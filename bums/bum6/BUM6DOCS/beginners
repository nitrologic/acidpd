Decisions Truth and Logic
-------------------------

Sounds more like the introduction of some World peace accord 
than a programming article but never the less that is what we 
are going to be discussing and explaining in this the long 
overdue third installment in the beginners column.

What is True and what is False.
-------------------------------
Unlike the real world, computers allways have a definate True 
or false answer to everything, there are no grey areas, no 
possibilities.

In Blitz.

False = 0
True  = -1 (or a value that is non zero)


As an example here is a piece of blitz code that 
makes a decision.



If 6 = 5      ;Not in this lifeftime matey.
  nprint "Never See Me!"
Endif

Before we go on to using Blitz's decision making commands 
(known as 'programme flow' commands) lets first learn about 
TRUTH tables.

A brief interlude into LOGIC
----------------------------

Inside your computer are millions of tiny electronic 
gates.These gates are responsible for every operation the 
computer carries out, but work according to very simple
priciples. In essence 'logic' gates (as they are called) open 
to let information through if a given set of conditions becomes 
true.

For example, the 'and' gate has two inputs and one output. If 
both the inputs are binary 1 or on (or true) then the output is 
1, or 'true'. For any other combination of inputs, the output 
is 0, 'false'.

;ex 1
;
first.b=1
second.b=2

If second = 2 And first = 1 Then NPrint "all true here!!"
end
;----------------------------------


So in the above example both the 'expressions' second=2 and 
first=1 in the 'if' statement evaluate to true so what we are 
saying in the above example is

If TRUE and TRUE evaluates to TRUE then print "all true here!!"


Here are some logic gates for basic functions. assume 1 to be 
true and 0 to be false, each of these examples have two inputs 
(A & B) and one output (Q).

    (and)
A B Q
0 0 0
0 1 0
1 0 0
1 1 1

    (or)

A B Q
0 0 0
0 1 1
1 0 1
1 1 0

The other gate shown above is the OR gate (this becomes true if 
either of the inputs is true, ie: it only ever returns false if 
all the inputs are false

so...

If 5=4 or 1=2 or 4=4 then print "something there was true"

but...

if 2=3 or 1=2 or 100=0 then print "something here was true" 
;nothing was so you will never see it.


There is one other gate that we need to talk about, the NOT 
gate this gate does an 'inversion' what that means it changes a 
0 to a 1 and a 1 to a 0, which you should now recognise and 
makeing a false expression true and a true expression false.

ie:

If NOT (5=4) then print "True statement" ; the not converts the 
false expression to a true one.


Back to the Blitz Bizzo.
------------------------

Now that you understand logic (or at least sorta do), its time 
to explain a couple of simple programme flow commands in Blitz 
(and indeed all BASICS)

If then... and If Else Endif...

The If command is the mainstay of all programmes in basic as 
far as decision making is concerned its basic form is this

If <an expression> then <do something> here are some examples

If name$="Roger" then Nprint "That's me!"

or....

if name$="Simon" or name$="Abba" then nprint "What a plonker!"

as you can see you can use any arithmetic operater can be used 
(nb: '<>' means 'not equal to' and the expression can be very 
complex with many ands and ors before the final true or false 
is met

ie

if (a=10 and b=20 and (c=12/2*pi*30/4.57)) or (b=2 and c=3 and 
disco$="revolting") then nprint "Sheesh that was hard work"

ok there are a couple more variants of the 'If' statement 

If <expression>
  <block set of instructions>
EndIf

This is the same has the If then except that once the condition 
has been tested by the if and is found to be true it will 
execute all the statements contained within that If till its 
corresponding endif ie:

If 5=5  ;true
  nprint "hello"
  nprint "there"
  nprint "Blitz"
  nprint "User"
endif

the Last variant of the If instruction is the If.... Else .... 
Endif variant which allows you to take action on a statement if 
its true and take alternative action if it is false. ie:


;Important person test programme v1.0
;------------------------------------
If name$="Roger"
  nprint "Wow.... can I have your autograph"  ;puke
else
  nprint "Oi who the hell are you then...." ;nasty
endif

Well thats given you heaps of food for thought, go through the 
programmes on example disks and the 'programme flow' chapter of 
the reference manual and try and sort out For.. Next and 
While... Wend for yourself, you should be able too, I will 
however cover them next time

Sorry this article is so short, I have very busy as of late 
(what too busy to write this in the last '9' months !! you cry) 
well ummmmmmm no, but I've left it rather late so happy 
blitzing (theres heaps of cool stuff in BUM6 anyway and keep at 
it..... Programming that is


Roger


