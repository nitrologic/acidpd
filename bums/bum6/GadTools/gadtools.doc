                    Blitz2 GadTools Documentation

                            Revision 2

                       (c)1994 Acid Software



Overview
--------

The following is the rerelease of the gadtools documentation that
was included in BUM5 along with some additional information which
I have inserted below.

With the release of Intuitools2 the creation of Gadtools based
user interfaces should be much simpler for the Blitz2 applications
programmer.

Advanced programmers may note that the source code to the Blitz2
GadTools library has been included in the libsdev drawer of BUM6.

Note the addition of the new GTShapeGadget which was contributed
to the library by Romulus of Germany.


IDCMP Messages
--------------

For Gadtools such as the ListView, Slider and Scroller gadgets the
window they are attached to must receive certain additional events
from Inuition. Using the AddIDCMP or DefaultIDCMP commands the
following flags should be set before opening the window.

#MOUSEMOVE=$10                 ;needed when user drags a slider
#INTUITICKS=$400000            ;needed when user holds down an arrow
AddIDCMP #MOUSEMOVE+#INTUITICKS

With the inclusion of the above 3 lines before opening your window
your window and gadtools will now receive an extra two classes of
events from Intuition.


Receiving GadTools Messages
---------------------------

For most GTGadgets your program should only act on a #GadgetUp message.
The GadgetHit function will return the ID of the gadget the user has
just hit and the EventCode function will contain it's new value.

Use GTGetString and GTGetInteger functions to read the contents of
the GadTools string gadgets after a #GadgetUp message.


Creating GadTools
-----------------

You are allowed both standard gadgets and GadTool ones in the same
window, of course id clashes must be avoided and unlike standard 
gadgets, gadtools gadgets are attached to the Window after it is 
open with the AttachGTList command.
 
The Intuitools program can be used to create a list of gadgets with
appropriate parameters and flags set.

One thing the Inutitools program at present will not create for you
are the custom tags that can be used to add extra features to gadgets.
See a recent edition of the ROM Kernel Reference Manual for an
incomprehensible discussion of the bizarre tags system C= has decided
to implement.

Each GTGadget has an x,y,w,h dictating its position and size. All
GTGadgets also have a Text$ field which is usually used as a text
label located beside the gadget in question. The text label may
also be located above, below or inside the gadget.


Blitz GadTool Flags
-------------------

The following are the flags that can be used with a GTGadget's flags
field.

Position of the Gadgets text label can be at one of the following
five locations in relation to the actual gadget:

#_LEFT=1:#_RIGHT=2:#_ABOVE=4:#_BELOW=8:#_IN=$10

The Gadget may be highlighted or disabled on initialisation with
the following two flags:

#_High=$20:#_Disable=$40

The Immediate flag can be used if you require a GadgetDown event from
a GTButton, GTSlider or GTScroller:

#_Immediate=$80

To set a boolean gadget to On on initialisation set the following flag:

#_BoolValue=$100 ;checkbox on

For arrows attached to the scroller gadget use the following flag:

#_Scaled=$200

To make a GTPropGadget vertical instead of horizontal:

#_Vertical=$400


The GadTools Gadgets
--------------------

GTButton GTList#,id,x,y,w,h,Text$,flags 

Same as Blitz2's TextGadget but with the added flexibility of 
placing the label Text$ above, below to the left or right of 
the button (see flags).


GTCheckBox GTList#,id,x,y,w,h,Text$,flags

A box with a check mark that toggles on and off, best used for 
options that are either enabled or disabled. 


GTCycle GTList#,id,x,y,w,h,Text$,flags,Options$ 

Used for offering the user a range of options, the options string 
should be a list of options separated by the | character 
eg. "HIRES | LORES | SUPER HIRES"


GTInteger GTList#,id,x,y,w,h,Text$,flags,default 

A string gadget that allows only numbers to be entered by the user.
See GTSetInteger and GTGetInteger for information about accessing
the contents of a GTInteger gadget.


GTListView GTList#,id,x,y,w,h,Text$,flags,list() 

The ListView gadget enaables the user to scroll through a list of 
options. These options must be contained in a string field of a 
Blitz2 linked list. Currently this string field must be the second 
field, the first being a word type. *See the GTChangeList command
for more details.


GTMX GTList#,id,x,y,w,h,Text$,flags,Options$ 

GTMX is an exclusive selection gadget , the Options$ is the same 
as GTCycle in format, GadTools then displays all the options in 
a vertical list each with a hi-light beside them.


GTNumber GTList#,id,x,y,w,h,Text$,flags,value 

This is a readonly gadget (user cannot interact with it) used to 
display numbers. See GTSetInteger to update the contents of
this readonly "display" gadget.


GTPalette GTList#,id,x,y,w,h,Text$,flags,depth 

Creates a number of coloured boxes relating to a colour palette, 


GTScroller GTList#,id,x,y,w,h,Text$,flags,Visible,Total 

A prop type gadget for the user to control an amount or level, is 
accompanied by a set of arrow gadgets.


GTSlider GTList#,id,x,y,w,h,Text$,flags,Min,Max 

Same as Scroller but for controlling the position of display inside 
a larger view.


GTString GTList#,id,x,y,w,h,Text$,flags,MaxChars 

A standard string type gadget. See GTSetString and GTGetString for
accessing the contents of a GTString gadget.


GTText GTList#,id,x,y,w,h,Text$,flags,Display$

A read only gadget (see GTNumber) for displaying text messages.
See GTSetString for updating the contents of this read only
"display" gadget.


Statement: GTShape  (* new in BUM6)

Syntax: GTShape GTList#,id,x,y,flags,Shape#[,Shape#]

Similar to the Blitz2 ShapeGadget allowing IFF graphics that
are loaded into Blitz2 shape objects to be used as gadgets
in a window.



The GadTools Commands
---------------------

Statement: AttachGTList

Syntax: AttachGTList GTList#,Window#

The AttchGTList command is used to attach a set of GadTools gadgets 
to a Window after it has been opened.


Statement: GTTags

Syntax: GTTags Tag,Value [,Tag,Value...]

The GTTags command can be used prior to initialisation of any of the 
12 gadtools gadgets to preset any relevant Tag fields. The following 
are some useful Tags that can be used with GTTags:

#tag=$80080000
#GTCB_Checked=#tag+4      ; State of checkbox
#GTLV_Top=#tag+5          ; Top visible item in listview
#GTLV_ReadOnly=#tag+7     ; Set TRUE if listview is to be ReadOnly
#GTMX_Active=#tag+10      ; Active one in mx gadget
#GTTX_Text=#tag+11        ; Text to display
#GTNM_Number=#tag+13      ; Number to display
#GTCY_Active=#tag+15      ; The active one in the cycle gad
#GTPA_Color=#tag+17       ; Palette color
#GTPA_ColorOffset=#tag+18 ; First color to use in palette
#GTSC_Top=#tag+21         ; Top visible in scroller
#GTSC_Total=#tag+22       ; Total in scroller area
#GTSC_Visible=#tag+23     ; Number visible in scroller
#GTSL_Level=#tag+40       ; Slider level
#GTSL_MaxLevelLen=#tag+41 ; Max length of printed level
#GTSL_LevelFormat=#tag+42 ;* Format string for level
#GTSL_LevelPlace=#tag+43  ;* Where level should be placed
#GTLV_Selected=#tag+54    ; Set ordinal number of selected
#GTMX_Spacing=#tag+61     ;* Added to font height to

All of the above except for those marked * can be set after 
initialisation of the Gadget using the GTSetAttrs command. 

The following is an example of creating a slider gadget with 
a numeric display:

f$="%2ld":GTTags #GTSLLevelFormat,&f$,#GTSLMaxLevelLen,4
GTSlider 2,10,320,120,200,20,"GTSLIDER",2,0,10


Function: GTGadPtr

Syntax: GTGadPtr (GTList#,id)

GTGadPtr returns the actual location of the specified GadTools 
gadget in memory.


Statement: GTBevelBox

Syntax: GTBevelBox GTList#,x,y,w,h,flags

GTBevelBox is the GadTools library equivalent of the Borders command and 
can be used to render frames and boxes in the currently used Window.


Statement: GTChangeList

Syntax: GTChangeList GTList#,id [ ,List() ]

GTChangeList must be used whenever a List attached to a GTListView needs 
to be modified. Call GTChangeList without the List() parameter to free the 
List, modify it then reattache it with another call to GTChangeList this 
time using the List() parameter.


Statement: GTSetAttrs

Syntax: GTSetAttrs GTList#,id [,Tag,Value...]

GTSetAttrs can be used to modify the status of certain GadTools gadgets
with the relevant Tags. See GTTags for more information.


Statement: GTSetString

Syntax: GTSetString GTList#,id,string$

Used with both GTString and GTText gadgets, GTSetString will not only
update the contents of the gadget but redraw it also.


Statement: GTSetInteger

Syntax: GTSetInteger GTList#,id,value

Used with both GTInteger and GTNumber gadgets, GTSetInteger will not only
update the contents of the gadget but redraw it also.


Statement: GTGetString

Syntax: GTGetString GTList#,id

Used to read the contents from a GTString gadget.


Statement: GTGetInteger

Syntax: GTGetInteger GTList#,id

Used to read the contents from a GTInteger gadget.


Statement: GTGetAttrs

Syntax: GTGetAttrs (GTList#,id,Tag)

A 3.0 specific command. See C= documentation for more information.


Statements: GTEnable & GTDisable

Syntax: GTEnable GTList#,Id  &  GTDisable GTList#,Id

These two commands allow GTGadgets to be enabled and disabled.


Statement: GTToggle

Syntax: GTToggle GTList#,Id [,On|Off]

GTToggle allows the programmer to set Boolean gadgets such as
GTButton and GTCheckbox to a desired state.

