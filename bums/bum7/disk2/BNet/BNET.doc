 _       __ ___
|_) |\| |_   |                     <9\
|_) | | |__  | .doc                /,'|
-------------------               ( V |
                                  cc_,'

This program is a neural net toy.  You can easily edit and play with
small binary nets.  Serious neural net applications are impossible, but
who wants to be serious?

BNET is based on Turings a-type and b-type definitions in his 1948 paper:
  "Intelligent Machinery". National Physical Laboratory Report.
  In Meltzer, B., Michie, D. (eds) 1969.  Machine Intelligence 5.
  In Ince, D.C. (ed.) 1992.  Collected Works of A.M. Turring:
                             Mechanical Intelligence.


             +----------+
             | CONTENTS |
             +----------+

             1: The A-type neuron

EDIT MODES:  2: Place
             3: Input
             4: Toggle
             5: SELECT, KILL
             6: Draw/Join

             7: Redraw
             8: Connections
   Running:  9: START, STEP

            10: The Menu:  NEW, LOAD, SAVE, SAVE IFF, QUIT

            11: CONNECTION TYPES


1: The A-Type neuron
--------------------
Each neuron simply holds a 1 or a 0.
It should have two inputs, coming from other neurons.
A neuron can have any number of outputs.

A neuron value is calculated from its two inputs, by the formula
value = 1-(input1 * input2).  This is a multiplicative model, equivalent
to a logical NAND.

A B-type net is mad up of A-type neurons, but in a special configuration.
See CONNECTION TYPES at the end of the doc file for information on
B-types.


EDIT MODES
==========
I have divided the screen into two sections.  The top section is a
control panel, containing all of the gadgets used for drawing and
editing.  Below this panel is the drawing area.

The five buttons on the far left of the control panel are edit modes.

2: PLACE
--------
To place new neurons on the screen, select the 'place' gadget, and then
click wherever you want neurons to appear.

3: INPUT
--------
Input neurons are not effected by any other neurons - they have no
inputs of their own.  They are used at the top level of a network and do
not change when the network is running.  The user can use these to input
data to the netork.  Positioning is the same as ordinary neurons.

4: TOGGLE
---------
Neurons initially are given the value 0, but this can be changed by
using the 'toggle' mode.  Whenever you wish to directly change a neurons
value, select the 'toggle' gadget and then click on any neuron
(including the small neurons in the B-type connections).
When the network is running, clicking on neurons automatically toggles
them, as in toggle mode.


5: SELECT , KILL
----------------
If you are unhappy with anything you have drawn, choose the select mode.
Neurons are selected by clicking on them.  Connecting lines are selected
by clicking on their arrow.  Multiple objects can be selected by holding
the mouse button and stretching a 'rubber-band' box around all the items
you wish to remove.

To deselect an item, simply re-select it.  Each time an item is chosen,
its 'selection' is toggled.  Blue boxes appear around all selected
items.

To deselect all the items, simply push the 'SELECT' mode gadget again,
or click on any other mode button.  NO items will actually be deleted
until you press the 'KILL' button.  This is the only safety feature.
DO NOT push the kill button unless you are sure you want all selected
items (the ones with blue boxes round them) to vanish!

KILL only works in SELECT mode.


6: DRAW/JOIN
------------
Joining neurons:

This mode lets you connect your neurons together, and draw freehand.
To connect two neurons, simply point to the middle of the parent neuron
and hold down the mouse button.  As you move the mouse, a line is drawn
on the screen.  Keep drawing until you reach the neuron you want the
line connected to, then release the button.  If one end wasn't close
enough to the neuron (or there was some other problem), the screen will
flash and the line will be removed.

If your line was placed successfully, it will change colour to black,
and an arrow will be added to show direction.

If you are using B-Type connections, a small triple of neurons will
appear on the line also.  The screen will flash if the program cannot
squeeze this group of neurons onto your line somewhere.  When using
B-type connections, you must make connections long enough to leave space
for the B-type triples.  See 8:CONNECTIONS, 11:CONNECTION TYPES.

All connections can be removed with SELECT.. KILL.  The best place to
click when selecting a connection is its arrow.


freehand drawing:

If you do not start or end your line at a neuron, the program leaves
your line as it is, and it has no effect on the network.  This allows
you to write small notes or symbols beside important structures.  Of
course these lines can be removed with SELECT by stretching a box around
them and pressing 'KILL'.


7: REDRAW
---------

Redraw simply redraws the screen from scratch.  Because erasing is done
without redrawing the entire screen (to keep things nice and quick),
some overlapping objects may not look right.  Just push redraw and
everything should be hoopy.

Redraw also gets rid of the big grey boxes that the RUN/STEP buttons
will create if some of your neurons are lacking in inputs.  These will
go away without selecting 'redraw' if you make sure all neurons have two
inputs. (See 9:START, STEP).


8: CONNECTIONS
--------------
There are two ways of connecting neurons together.  The default is
'A-Type', but you can select 'B-type' by pushing the gadget.  (See
11: CONNECTION TYPES.)


RUNNING THE NET
===============

9: START, STEP
--------------

Time in the network is measured in 'moments'.  Each moment of time, the
values of all the neurons on the screen are updated.

The STEP gadget advances time by one moment.


The START gadget continually runs the circuit until you select it again.
Note that the text changes to 'STOP' while the circuit is running.

While the circuit is running, you may toggle any neurons on the screen.
This is very useful in testing the behaviour of the net.  Input can be
entered in real time by toggling input-type neurons, but all other
neurons can also be toggled.  Any part of the net can be tested.

The slider adjusts the running speed of the net.  If it is at the far
right, the program will attempt to update the net every 50th of a
second.  The far left represents one update every 2.5 seconds.

The moving hourglass is simply an indication that the net is running, so
you don't try drawing lines and stuff (of course toggle mode DOES work
while running).  It is also quite pretty.

The QUIT menu option always works, but you must push the STOP gadget
first, if you want to continue normal editing or LOAD/SAVE anything.


One feature of pressing the START, STEP gadgets is that the program
tests to see is all of your neurons have two inputs, like they should.
If any neurons don't have two inputs, a big grey box will be drawn
around them (note that input neurons have a small grey border, but they
always have zero inputs.  Don't get confused ;-).  The net WILL still
run in this situation.  Any missing inputs are assumed to be 0.  This is
so you can test part of the net without having to tidy everything up and
remove or connect-up uncompleted parts.

If you really feel uncomfortable with the big grey boxes (bgb's), you
can make them go away by pushing 'redraw'.  They have no effect on
drawing.  However, if you actually add inputs to those neurons with the
bgb's, so that all the neurons have two inputs, the bgb's will disappear
next time you select START or STEP.


10: --+ THE MENU +--
~~~~~~~~~~~~~~~~~~~~
The single menu is minimalist.

NEW
---
This is DaNgErOuS.  It Wipes everthing.  __NO__ 'are you absolutely sure
you want to do that?' questionaires.  I put it in the menu so it would
be hard to push by accident.  You have been warned.

This is equivalent to choosing SELECT, stretching the box round
_everything_ and pushing KILL.


LOAD
----
I really don't think I have to explain this one.
I happily believe that you already know what loading does.  It LOADs.

A check is made that the file starts with the correct sequence.  If you
really mangle the insides of a file (especially a certain few bytes that
I won't mention) BAD THINGS could happen during loading.


SAVE
----
SAVEs (the net you've been drawing).
This is a good idea if you ever turn your computer off.
Files are automatically suffixed ".net"


SAVE IFF
--------
Saves a picture file of the screen (minus the control panel).
The save file has a black and white palette so that you can print it out
as-is (nobody I know can afford a printer that prints subtle shades of
grey and blue nicely).  However, the file does still have the original
four colours (just that two of them are now white, and two are black).
If you change the palette, you can get it to look the same as the
original.

The main reason SAVE IFF is here is because I don't intend adding fancy
titling and stuff to BNET.  If you want pretty fonts and so on, just
load the iff into your favourite paint program.

Picture files are automatically suffixed ".iff"


QUIT
----
It is conceivable that you may at some stage wish to stop using this
little program.  Note that there is _NO_ "but SIR/MADAM, you clicked on
the screen once since you last saved.  Surely you don't want to lose a
half second of scribble that actually messed up the file, when you could
be answering silly requestors!?"

The above translated just means that I can't be bothered putting the
feature in.


11: CONNECTION TYPES:
=====================

A-TYPE
------
A-types are real simple.  The value from the parent neuron is passed
straight through to the child neuron.  (It is NANDed with the other
input to that neuron)


B-TYPE
------
B-types are a lot more complex.  I would suggest you ignore this section
until you have had a go using plain A-type nets.

I put these in the program because Turing seemed to think they were
better in his article.  They are simply an abbreviation for a special
arrangement of neurons in each connection.

The three neurons (shown smaller than other neurons) behave in exactly
the same way as the other neurons but they are connected in a certain
way.  The top neuron has one input coming from the parent neuron in the
connection, and has one input joining to the child neuron.

The bottom two neurons are an "introverted pair".  Both inputs into the
right hand neuron come from the left one, and vice versa.  One last
connection from right hand neuron forms the second input of the top
neuron.  The introverted pair has different effects on the net,
depending on the the initial values of its two neurons.

The B-type connection             is equivalent to:

O---->------o8------------O       O---->------O-------------O
                                              ^
Big        three       Big               __>_ |
neuron     little      neuron           /    \|
           neurons                     O---->-O
                                      / \_<__/ \
                                     (__________)
                                          <

A pure B-type net contains only these type of connections.  However, it
is legal to input directly to the introverted pair.  Below, the pair
neurons only have one input going to each other, and have a second input
from elsewhere.  The A and B inputs may be input-type neurons, or
connections from another part of the net (see below).  There is no
abbreviation for this arrangement, and it must be drawn manually with
'A-type' connections, but by definition it is still considered to be a
B-type connection.

i.e.  O--->------O-------------O
                 ^
                 |
        A---->---O
                / \
               ^   v
                \ /
        B---->---O

The small neurons can still be toggled in the same way as other neurons,
but they are inseperable.  They can only be removed by deleting the
connection that they are a part of.
==========================================================================

Have fun...

If you'd like to tell me how wonderful you think my code is, or just
feel like dropping me a line to say that it makes an A5000/060 AAAA
machine self-combust, I am:

Bruce Webster,     websbd2@cosc.canterbury.ac.nz
29 Tika ST       or craigw@pretzel.equinox.gen.nz
Riccarton
CHCH
NZ 8004
