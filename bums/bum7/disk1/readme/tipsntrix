      GamesTips 'n' Trix
      ==================

One of the major factors affecting a games speed
is the amount of bitplanes that are Used. With the A1200 AND A4000
came the AGA chip set which allows up To 8 bitplanes To be Used in
a single playfield display. So with up To 256 colours On Screen
you can imagine some pretty mean, Console bashing games.
Unfortunately, the more colours you Use, the more bitplanes you
Use, the more bitplanes you Use the slower it takes To draw each
Shape (a BLITZ blitter object). Fortunately there are a few tricks
up the BLITZ programmers sleeve To speed things up.


Use of colours
==============
Although a game may Use 32 colours (5 bitplanes) it is
pretty rare For all the graphics in the game To have all 32
colours in them. This is were clever Palette control comes in.

Try AND place the most frequently Used colours in the lower half of
the Palette. While it may be nice To have all the greys together,
all the reds together etc. it may NOT be very practical. If
jumbling your Palette up means that some of the graphics now only
Use the lower 4, 8 OR 16 colours Then do it !

Once you have done
this it is also important how you cut the shapes out of the
BitMap. If your BitMap has 5 bitplanes any Shape that you cut out
of it using the GetaShape command will have 5 bitplanes too,
regardless of the amount of colours that are actually in the
Shape. The easiest way To Get around this is when you are actually
drawing the graphics (e.g. in a paint package such as Brilliance
OR DPaint) To keep all graphics with 3 bitplanes in one IFF File,
all graphics with 4 bitplanes in another IFF File etc. so that you
can create a BitMap with the correct amount of bitplanes To cut
them from.

So now that some of your shapes Use less bitplanes your
shapes will take less time draw when using the blitter commands
(such as Blit, QBlit, Block etc.).


Bitplane magic
==============
With BUM 4 there
came a very trendy command in BLITZ called BitPlanesBitMap the
syntax of which is shown below:

BitPlanesBitMap SrcBitMap,

DestBitMap,PlanePickThis allows you To create a new BitMap using
some of the bitplanes from a BitMap that you have already created.
As this command uses bitplanes that have already been created very
little memory is taken up by the new BitMap. The planes are
selected using the PlanePick parameter, the following values can
be ORed together:

Bitplane 1 = $01        Bitplane 2 = $02
Bitplane 3 = $04    Bitplane 4 = $08
Bitplane 5 = $10        Bitplane 6 = $20
Bitplane 7 = $40      Bitplane 8 = $80


Blitter collision
-----------------
Probably
one of the most Used collision commands is the BlitColl command
which allows you To 'test Blit' a Shape To a BitMap without the
Shape actually being written, To see If the Shape would collide
with something already drawn On the BitMap. As the command does
NOT actually draw the Shape it is pretty fast. The syntax of this
command is shown below:

BlitColl (Shape#,X,Y)

Sometimes, as with
sprites, it is only necessary To check For the presence of odd
colours when doing collision checking (again, it depends On how
you have set up your Palette). So If you are only going To check
For odd colours you only need To check the first bitplane (all odd
colours Use the first bitplane).

Normally the BlitColl command
would check the same amount of bitplanes as the Shape you are
using. So If you are using BlitColl with a Shape that has 3
bitplanes, the command will check the first three bitplanes of the
current BitMap. However, If you only want To do collision checking
For odd colours this is wasting precious processing time. The
following fragment of code shows you how To Use only the first
bitplane of BitMap 0 For collision checking.

#SHP_Man    = 10            ; The number of our shape
#BMP_Main   = 0             ; The number of the main bitmap
#BMP_Coll   = 1       ; The number of the dummy collision
...                     ; bitmap
BitMap #BMP_Main,320,256,3    ; The main bitmap (bitmap 0)
BitPlanesBitMap #BMP_Main,#BMP_Coll,1   ; Dummy bitmap (bitmap 1) created
...         ; using bitplane 1 of bitmap 0
Use BitMap 1                          ; Use collision bitmap
If BlitColl(#SHP_Man,1)                 ; Check for collision with odd colours
... collision code goes here
Else
  Use BitMap 0                          ; Use the main bitmap
  Blit #SHP_Man,X,Y                     ; and blit the shape
EndIf


Palettes revisited
------------------
If you are only doing collision
checking For odd colours AND the area in the BitMap you are
checking consists of only Even colours, a collision will NOT be
registered. You can Use this To your advantage.

If you are writing
a game that uses explosions, For example a shoot-em-up, when the
player fires a missile it would NOT be desirable For it To
register a collision when blitted over an explosion. This would
waste valuable processing time While you are trying To find out
what it was that the missile hit. If the explosion was made up of
only Even colours Then no collision would be registered when using
the BlitColl command.


Shadows AND other special effects
---------------------------------
The BitPlanesBitMap command can also be Used To create some nice
effects such as shadows. Try running the following
code:


BLITZBitMap 0,320,256,5
BitPlanesBitMap 0,1,16Slice 0,44,320,256,$FFF8,5,8,32,320,320
Show 0

X=80:Y=48:Width=160:Height=160
Use BitMap 0
For ColourNo = 0 To 15
  DarkRed=QLimit(Red(ColourNo)-5,0,15)
  DarkGreen=QLimit(Green(ColourNo)-5,0,15)
  DarkBlue=QLimit(Blue(ColourNo)-5,0,15)
  RGB ColourNo+16,DarkRed,DarkGreen,DarkBlue
  Boxf X,Y,X+Width,Y+Height,ColourNo
  X+4:Y+4:Width-8:Height-8
Next ColourNo

X=120:Y=88:Width=80:Height=80
Use BitMap 1
While Joyb(1) = 0
  Jx=Joyx(1):Jy=Joyy(1)
  If Jx OR Jy
    Cls
    X=QLimit(X+Jx,0,320-Width)
    Y=QLimit(Y+Jy,0,256-Height)
  EndIf
  Boxf X,Y,X+Width,Y+Height,1
  VWait
Wend
End


The above example creates
a darker version of the first 16 colours in the second half of the
Palette. The Boxf command is Then Used To draw a Box into bitplane
5, using the dummy BitMap created with the BitPlanesBitMap
command, To give a shadow Type effect.


Last but NOT least
==================
When using shapes containing different amounts of bitplanes, ensure that
shapes with the least amount of bitplanes are drawn first. Drawing
a 3 bitplane Shape On top of a graphic with more than 3 bitplanes
will more than likely produce an undesirable effect. If you do
have To do this, Use the Excessonoff parameter of the relevant
Blit command so that the remaining (OR excess) bitplanes are
cleared.


Careful planning
----------------
As with all things careful planning
initially may take more time but will save you time in the long
run. The key points are:

* Choose your Palette well,
  carefully placed colours can help you increase your games speed.
* Cut down the amount of bitplanes needed wherever possible. The
  least amount of bitplanes you Use, the faster you can draw
  your objects.
* When using BlitColl, clever Use of the
  BitPlanesBitMap command can save a lot of time  (especially with
  big shapes).
* When drawing shapes, draw shapes with the least
  amount of bitplanes first.
* Most importantly of all, Use your
  imagination AND experiment. The best way To learn is through
  trial AND error.

Tim Caldwell
Tues. 26th April 1994
